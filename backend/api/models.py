# backend/api/models.py
from pydantic import BaseModel, Field

# Defines the expected structure for requests to the /api/ask endpoint
class QueryRequest(BaseModel):
    query: str = Field(..., description="The question asked by the user.")
    # Add classroom_id for MVP2
    classroom_id: str = Field(..., description="The unique identifier for the classroom context.")

# Defines the structure for responses from the /api/ask endpoint
class AnswerResponse(BaseModel):
    answer: str = Field(..., description="The answer generated by the RAG pipeline.")
    # Future enhancement: Add sources used for the answer
    # sources: list[dict] = Field([], description="List of source document snippets used for the answer.")

# --- MVP2: Add models for the new Notes endpoint ---

# Defines the structure for requests to add a note
class AddNoteRequest(BaseModel):
    note_text: str = Field(..., description="The text content of the note being added.")
    # We'll get classroom_id from the URL path parameter

# Defines the structure for responses after adding a note
class AddNoteResponse(BaseModel):
    message: str = Field(..., description="Confirmation message.")
    classroom_id: str = Field(..., description="The ID of the classroom the note was added to.")
    note_id: int | str = Field(..., description="A unique identifier for the newly added note (e.g., timestamp or index).") # Example ID

